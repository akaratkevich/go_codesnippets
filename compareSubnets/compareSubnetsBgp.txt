/*
The function takes in an array of pairs of file paths to compare. For each pair, the function extracts the node name from the file path, reads the contents of both files,
extracts the subnets from each file,and then compares the subnets to determine if there are any missing or extra subnets in either file.
The extractSubnets function is a helper function that takes in a string and returns an array of subnets extracted from the string using a regular expression.
*/

package compareSubnetsBgp

import (
	"bufio"
	"fmt"
	"github.com/pterm/pterm"
	"log"
	"os"
	"regexp"
	"strings"
)

func CompareSubnetsBGP(pairs [][]string) { //takes in an array of pairs of file paths to compare
	for _, pair := range pairs {
		// extracts node name from the pair (e.g. D:\\vdcMigrations\\ld5-1a_route-checks-pre)
		path := pair[0]                                    // extract the first element of the pair
		pathComponents := strings.Split(path, "\\")        // split the path by backslashes
		fileName := pathComponents[len(pathComponents)-1]  // get the last component (file name)
		fileNameComponents := strings.Split(fileName, "_") // split the file name by hyphens
		nodeName := fileNameComponents[0]                  //get the first component (node name)

		pterm.DefaultSection.Println("Section/BGP subnet comparison:", nodeName)
		pterm.Info.Printf("Comparing subnets: %s and %s\n", pair[1], pair[0])

		// Read in the data from the file 1 (1/2 are swapped around as the post files are always newer hence would appear first in the search)
		file1Bytes, err := os.ReadFile(pair[1])
		if err != nil {
			log.Fatal(err)
		}
		file1Content := string(file1Bytes)
		// extract subnets from file 1
		file1Subnets := extractSubnets(file1Content)

		// Read in the data from file 2
		file2Bytes, err := os.ReadFile(pair[0])
		if err != nil {
			log.Fatal(err)
		}
		file2Content := string(file2Bytes)
		// extract subnets from file 2
		file2Subnets := extractSubnets(file2Content)

		// Mapping VRF to RI (Testing)
		//vrfPilotBefore := "'TELEPO-TEAMS-PILOT-40031744'"  //Testing
		//vrfPilotAfter := "'RI-L3PILOT1-4940011.inet.0'"    //Testing
		//vrfTelepoBefore := "'TELEPO-TEAMS-PILOT-50031744'" //Testing
		//vrfTelepoAfter := "'RI-L3INTERNET-4910111.inet.0'" //Testing

		//// Actual Mappings
		bsmInternetBefore := "'BSM-INTERNET'"
		pilot1InternetBefore := "'PILOT1-INTERNET'"
		pilot2InternetBefore := "'PILOT2-INTERNET'"
		internetAfter := "'RI-L3INTERNET-4910111.inet.0'"

		// Compare subnets and find missing ones
		panel1 := "(-) Missing BGP Subnets on BPE:\n"
		panel1 += "==================================\n"

		modifiedFile1String := make([]string, len(file1Subnets))
		for i, subnet := range file1Subnets {
			if strings.Contains(subnet, bsmInternetBefore) { //BSM Internet
				modifiedFile1String[i] = strings.Replace(subnet, bsmInternetBefore, internetAfter, -1)
			} else if strings.Contains(subnet, pilot1InternetBefore) { // Pilot 1 Internet
				modifiedFile1String[i] = strings.Replace(subnet, pilot1InternetBefore, internetAfter, -1)
			} else if strings.Contains(subnet, pilot2InternetBefore) { // Pilot 2 Internet
				modifiedFile1String[i] = strings.Replace(subnet, pilot2InternetBefore, internetAfter, -1)
			} else {
				modifiedFile1String[i] = subnet
			}

			found := false
			for _, subnet2 := range file2Subnets {
				if modifiedFile1String[i] == subnet2 {
					found = true
					break
				}
			}

			if !found {
				panel1 += pterm.FgLightRed.Sprintf("- %s\n", modifiedFile1String[i])
			}
		}

		// compare subnets and find extra ones
		panel2 := "(+) Extra BGP Subnets on BPE:\n"
		panel2 += "==================================\n"

		for _, subnet2 := range file2Subnets {

			found := false
			for _, subnet1 := range modifiedFile1String {
				if subnet2 == subnet1 {
					found = true
					break
				}
			}

			if !found {
				panel2 += pterm.FgLightGreen.Sprintf("+ %s\n", subnet2)
			}
		}

		// Arrange panels side by side
		panels := pterm.Panels{
			{{Data: pterm.Sprintf(panel1)}, {Data: pterm.Sprintf(panel2)}},
		}
		// Print panels to console
		pterm.DefaultPanel.WithPanels(panels).Render()
		// End panels

	}

}

// Helper function that takes in a string and returns an array of subnets extracted from the string using a regular expression.
// The function extractSubnets takes an input string content and returns a slice of strings []string.
// The content parameter contains the text files
// and the returned slice will contain the extracted subnets along with the command they are associated with.

func extractSubnets(content string) []string {
	subnets := []string{}                                   // initialise an empty slice subnets to store the extracted subnet strings
	scanner := bufio.NewScanner(strings.NewReader(content)) //  process the input content line by line.
	// Regular expressions defined
	reCommandCisco := regexp.MustCompile(`show ip route vrf (\S+)`) //Todo
	reCommandJunos := regexp.MustCompile(`show route table (\S+)`)
	reSubnet := regexp.MustCompile(`(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2})`)
	//reSubnet := regexp.MustCompile(`B\*?\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/\d{1,2})`)

	var currentCommand string // initialise variable to store the most recent command found in the content.

	for scanner.Scan() { // loop to read the content line by line
		line := scanner.Text()
		// For each line, the function first checks if the line matches one of the regular expression patterns.
		// If it does, it extracts the command and assigns it to the currentCommand variable, then continues with the next line

		// Check if the line matches the reCommandCisco regular expression pattern.
		commandMatchCisco := reCommandCisco.FindStringSubmatch(line)

		// Check if the line matches the reCommandJunos regular expression pattern.
		commandMatchJunos := reCommandJunos.FindStringSubmatch(line)

		// If either regular expression pattern matches, extract the command and assign it to the currentCommand variable.
		if len(commandMatchCisco) > 0 {
			currentCommand = commandMatchCisco[1]
			continue
		} else if len(commandMatchJunos) > 0 {
			currentCommand = commandMatchJunos[1]
			continue
		}
		// If the line starts with empty string"", the function checks if it matches the reSubnet regular expression pattern.
		// If it does, it extracts the subnet and appends it to the subnets slice along with the associated command
		if strings.HasPrefix(line, "") {
			subnetMatch := reSubnet.FindStringSubmatch(line)
			if len(subnetMatch) > 0 {
				subnet := fmt.Sprintf("'%s': %s", currentCommand, subnetMatch[1])
				subnets = append(subnets, subnet)
			}
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	return subnets // returns the subnets slice containing the extracted subnets and their associated commands
}
